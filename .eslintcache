[{"/Users/dee/Desktop/spotify-v1/src/reportWebVitals.js":"1","/Users/dee/Desktop/spotify-v1/src/App.js":"2","/Users/dee/Desktop/spotify-v1/src/auth.js":"3","/Users/dee/Desktop/spotify-v1/src/Player.js":"4","/Users/dee/Desktop/spotify-v1/src/index.js":"5"},{"size":362,"mtime":1609573561461,"results":"6","hashOfConfig":"7"},{"size":5580,"mtime":1609607232076,"results":"8","hashOfConfig":"7"},{"size":475,"mtime":1609607425008,"results":"9","hashOfConfig":"7"},{"size":1564,"mtime":1609601512706,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1609573561460,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1unur9c",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dee/Desktop/spotify-v1/src/reportWebVitals.js",[],"/Users/dee/Desktop/spotify-v1/src/App.js",["24"],"import logo from './logo.svg';\nimport './App.css';\n\nimport React from 'react';\nimport * as $ from 'jquery';\n\nimport {auth_URL} from './auth';\n\nimport Player from './Player'\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            token: null,\n            no_data: false,\n            is_playing: false,\n            item: {\n                album: {\n                    images: [{ url: ''}]\n                },\n                artists: [{\n                    name: '',\n                    external_urls: {},\n                }],\n                name: '',\n                popularity: 0,\n                duration_ms: 0,\n                external_urls: {},\n            },\n            progress_ms: 0,\n            device: {},\n\n            manually_paused: false,\n        };\n\n        /*\n        this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n        this.update = this.update.bind(this);\n        this.pauseCurrentlyPlaying = this.pauseCurrentlyPlaying.bind(this);\n        */\n    }\n\n    componentDidMount() {\n        /* preprocess window, will have access token if from spotify response */\n        let response = window.location.hash\n            .substring(1)\n            .split('&')\n            .reduce( (sum, next) => {\n                if (next) {\n                    let parts = next.split('=');\n                    sum[parts[0]] = decodeURIComponent(parts[1]);\n                }\n                return sum;\n            }, {});\n        window.location.hash = '';\n\n        let _token = response.access_token\n        if (_token) {\n            this.setState({\n                token: _token,\n            });\n\n            /* call API */\n            this.getCurrentlyPlaying(_token);\n        }\n\n        /* call API again every X milliseconds */\n        this.interval = setInterval(() => this.update(), 1000);\n    }\n\n    /* clear interval when component unmounts */\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    /* keep calling API */\n    update() {\n        if (this.state.token) {\n            this.getCurrentlyPlaying(this.state.token);\n        }\n    }\n\n    getCurrentlyPlaying(token) {\n        /* async API call */\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player',\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n\n            success: (data) => {\n                /* check if no response */\n                if (!data) {\n                    this.setState({\n                        no_data: true,\n                    });\n                    return;\n                }\n                \n                /* if response, update state */\n                this.setState({\n                    no_data: false,\n                    is_playing: data.is_playing,\n                    progress_ms: data.progress_ms,\n                    item: data.item,\n                    device: data.device,\n                });\n            }\n        });\n    }\n\n    pauseCurrentlyPlaying(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/pause',\n            method: 'PUT',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for PUT */\n        })\n    }\n\n    resumeCurrentlyPlaying(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/play',\n            method: 'PUT',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for PUT */\n        })\n    }\n\n\n    render() {\n        return (\n            <div className='App'>\n                {/* If no token, get*/}\n                {!this.state.token && (\n                    <header className='App-header-login'>\n                        <a\n                        className='btn btn-login'\n                        href={auth_URL}\n                        >\n                            Login to Spotify\n                        </a>\n                    </header>\n                )}\n                {this.state.token && !this.state.no_data && (\n                    <header className='App-header-music'>\n                        <div className='music-area'>\n                            <Player\n                            is_playing={this.state.is_playing}\n                            progress_ms={this.state.progress_ms}\n                            item={this.state.item}\n                            device={this.state.device}\n                            />\n                            {this.state.is_playing && (\n                                <button \n                                className='btn-pause-play btn-pause'\n                                onClick={() => this.pauseCurrentlyPlaying(this.state.token)}>\n                                    <b>&#8545;</b>\n                                </button>\n                            )}\n                            {!this.state.is_playing && (\n                                <button \n                                className='btn-pause-play btn-play'\n                                onClick={() => this.resumeCurrentlyPlaying(this.state.token)}>\n                                    &nbsp;&#9658;\n                                </button>\n                            )}\n                        </div>\n                    </header>\n                )}\n                {this.state.no_data && (\n                    <p>\n                        Play a song.\n                    </p>\n                )}\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","/Users/dee/Desktop/spotify-v1/src/auth.js",[],"/Users/dee/Desktop/spotify-v1/src/Player.js",["25"],"import React from 'react';\nimport './Player.css';\n\nconst Player = (props) => {\n\n    let progressBarStyle = {\n        width: ((props.progress_ms / props.item.duration_ms) * 100) + '%',\n        animation: props.is_playing ? 'fadein 2s forwards' : 'fadeout 2s forwards',\n    };\n\n    let fade ={\n        animation: props.is_playing ? 'fadein 2s forwards' : 'fadeout 2s forwards',\n    }\n\n    return (\n        <div className='song-info-ext'>\n            <div className='song-info-int'>\n                <img className='song-image' src={props.item.album.images[0].url}></img>\n                <div className='song-title'>\n                    <a\n                    className='song-title-link'\n                    style={fade} \n                    href={props.item.external_urls['spotify']}>{props.item.name}</a>\n                </div>\n                <div className='song-artist'>\n                    <a \n                    className='song-artist-link'\n                    style={fade} \n                    href={props.item.artists[0].external_urls['spotify']}>\n                        {props.item.artists[0].name}\n                    </a>\n                </div>\n                <div className='progress-border'>\n                    <div className='progress-in' style={progressBarStyle}></div>\n                </div>\n            </div>\n            <div className='popularity' style={fade}>Song Popularity - {props.item.popularity}</div>\n            <div className='device' style={fade}>Source - {props.device['name']}</div>\n        </div>\n    );\n};\n\nexport default Player;","/Users/dee/Desktop/spotify-v1/src/index.js",[],{"ruleId":"26","severity":1,"message":"27","line":1,"column":8,"nodeType":"28","messageId":"29","endLine":1,"endColumn":12},{"ruleId":"30","severity":1,"message":"31","line":18,"column":17,"nodeType":"32","endLine":18,"endColumn":82},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]