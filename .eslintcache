[{"/Users/dee/Desktop/spotify-v1/src/reportWebVitals.js":"1","/Users/dee/Desktop/spotify-v1/src/App.js":"2","/Users/dee/Desktop/spotify-v1/src/auth.js":"3","/Users/dee/Desktop/spotify-v1/src/Player.js":"4","/Users/dee/Desktop/spotify-v1/src/index.js":"5","/Users/dee/Desktop/spotify-v1/src/DarkMode.js":"6","/Users/dee/Desktop/spotify-v1/src/ProgressBar.js":"7","/Users/dee/Desktop/spotify-v1/src/ButtonLogin.js":"8","/Users/dee/Desktop/spotify-v1/src/ButtonToggle.js":"9"},{"size":362,"mtime":1609573561461,"results":"10","hashOfConfig":"11"},{"size":7531,"mtime":1609695486548,"results":"12","hashOfConfig":"11"},{"size":475,"mtime":1609696956989,"results":"13","hashOfConfig":"11"},{"size":1629,"mtime":1609694575289,"results":"14","hashOfConfig":"11"},{"size":500,"mtime":1609573561460,"results":"15","hashOfConfig":"11"},{"size":1555,"mtime":1609696861671,"results":"16","hashOfConfig":"11"},{"size":643,"mtime":1609689733892,"results":"17","hashOfConfig":"11"},{"size":676,"mtime":1609695372509,"results":"18","hashOfConfig":"11"},{"size":449,"mtime":1609696742149,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1unur9c",{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/dee/Desktop/spotify-v1/src/reportWebVitals.js",[],"/Users/dee/Desktop/spotify-v1/src/App.js",["39"],"import logo from './logo.svg';\nimport './App.css';\n\nimport React from 'react';\nimport * as $ from 'jquery';\n\nimport {auth_URL} from './auth';\n\nimport Player from './Player';\nimport DarkModeToggle from './DarkMode';\nimport './DarkMode.css';\nimport ButtonLogin from './ButtonLogin';\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            token: null,\n            no_data: false,\n            is_playing: false,\n            item: {\n                album: {\n                    images: [{ url: ''}]\n                },\n                artists: [{\n                    name: '',\n                    external_urls: {},\n                }],\n                name: '',\n                popularity: 0,\n                duration_ms: 0,\n                external_urls: {},\n            },\n            progress_ms: 0,\n            device: {},\n        };\n\n        /*\n        this.getCurrentlyPlaying = this.getCurrentlyPlaying.bind(this);\n        this.update = this.update.bind(this);\n        this.pauseCurrentlyPlaying = this.pauseCurrentlyPlaying.bind(this);\n        */\n    }\n\n    componentDidMount() {\n        /* preprocess window, will have access token if from spotify response */\n        let response = window.location.hash\n            .substring(1)\n            .split('&')\n            .reduce( (sum, next) => {\n                if (next) {\n                    let parts = next.split('=');\n                    sum[parts[0]] = decodeURIComponent(parts[1]);\n                }\n                return sum;\n            }, {});\n        window.location.hash = '';\n\n        let _token = response.access_token\n        if (_token) {\n            this.setState({\n                token: _token,\n            });\n\n            /* call API */\n            this.getCurrentlyPlaying(_token);\n        }\n\n        /* call API again every X milliseconds */\n        this.interval = setInterval(() => this.update(), 1000);\n    }\n\n    /* clear interval when component unmounts */\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    /* keep calling API */\n    update() {\n        if (this.state.token) {\n            this.getCurrentlyPlaying(this.state.token);\n        }\n    }\n\n    getCurrentlyPlaying(token) {\n        /* async API call */\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player',\n            method: 'GET',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n\n            success: (data) => {\n                /* check if no response */\n                if (!data) {\n                    this.setState({\n                        no_data: true,\n                    });\n                    return;\n                }\n                \n                /* if response, update state */\n                this.setState({\n                    no_data: false,\n                    is_playing: data.is_playing,\n                    progress_ms: data.progress_ms,\n                    item: data.item,\n                    device: data.device,\n                });\n            }\n        });\n    }\n\n    pauseCurrentlyPlaying(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/pause',\n            method: 'PUT',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for PUT */\n        })\n    }\n\n    resumeCurrentlyPlaying(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/play',\n            method: 'PUT',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for PUT */\n        })\n    }\n\n    getNextSong(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/next',\n            method: 'POST',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for POST */\n        })\n    }\n\n    getPrevSong(token) {\n        $.ajax({\n            url: 'https://api.spotify.com/v1/me/player/previous',\n            method: 'POST',\n            headers: {\n                'Authorization': 'Bearer ' + token\n            },\n            /* no response for POST */\n        })\n    }\n\n    render() {\n        return (\n            <div className='App'>\n                {/* If no token, get*/}\n                {!this.state.token && (\n                    <header className='App-header-login' >\n                        <ButtonLogin\n                        auth_URL={auth_URL}\n                        />\n                        <DarkModeToggle />\n                    </header>\n                )}\n                {this.state.token && !this.state.no_data && (\n                    <header className='App-header-music'>\n                        <div className='music-area'>\n                            <Player\n                            is_playing={this.state.is_playing}\n                            progress_ms={this.state.progress_ms}\n                            item={this.state.item}\n                            device={this.state.device}\n                            />\n                            {this.state.is_playing && (\n                                <div className='media-controls-table'>\n                                    <div className='media-controls-row'>\n                                        <button\n                                        className='btn-media btn-prev'\n                                        onClick={() => this.getPrevSong(this.state.token)}>\n                                            &#171;\n                                        </button>\n                                        <button \n                                        className='btn-media btn-pause'\n                                        onClick={() => this.pauseCurrentlyPlaying(this.state.token)}>\n                                            <b>&#8545;</b>\n                                        </button>\n                                        <button\n                                        className='btn-media btn-next'\n                                        onClick={() => this.getNextSong(this.state.token)}>\n                                            &#187;\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                            {!this.state.is_playing && (\n                                <div className='media-controls-table'>\n                                    <div className='media-controls-row'>\n                                        <button \n                                        className='btn-media btn-play'\n                                        onClick={() => this.resumeCurrentlyPlaying(this.state.token)}>\n                                            &nbsp;&#9658;\n                                        </button>\n                                    </div>\n                                </div>\n                            )}\n                            <DarkModeToggle />\n                        </div>\n                    </header>\n                )}\n                {this.state.no_data && (\n                    <header className='App-header-login'>\n                        <div className='no-music-text'>\n                            Songs you play will appear here.\n                        </div>\n                        <DarkModeToggle />\n                    </header>\n                )}\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","/Users/dee/Desktop/spotify-v1/src/auth.js",[],"/Users/dee/Desktop/spotify-v1/src/Player.js",["40"],"/Users/dee/Desktop/spotify-v1/src/index.js",[],"/Users/dee/Desktop/spotify-v1/src/DarkMode.js",["41","42","43","44","45","46","47","48"],"/Users/dee/Desktop/spotify-v1/src/ProgressBar.js",[],"/Users/dee/Desktop/spotify-v1/src/ButtonLogin.js",[],"/Users/dee/Desktop/spotify-v1/src/ButtonToggle.js",[],{"ruleId":"49","severity":1,"message":"50","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"53","severity":1,"message":"54","line":14,"column":17,"nodeType":"55","endLine":14,"endColumn":82},{"ruleId":"49","severity":1,"message":"56","line":9,"column":11,"nodeType":"51","messageId":"52","endLine":9,"endColumn":20},{"ruleId":"49","severity":1,"message":"57","line":10,"column":11,"nodeType":"51","messageId":"52","endLine":10,"endColumn":20},{"ruleId":"49","severity":1,"message":"58","line":11,"column":11,"nodeType":"51","messageId":"52","endLine":11,"endColumn":20},{"ruleId":"49","severity":1,"message":"59","line":12,"column":11,"nodeType":"51","messageId":"52","endLine":12,"endColumn":20},{"ruleId":"49","severity":1,"message":"60","line":13,"column":11,"nodeType":"51","messageId":"52","endLine":13,"endColumn":20},{"ruleId":"49","severity":1,"message":"61","line":14,"column":11,"nodeType":"51","messageId":"52","endLine":14,"endColumn":20},{"ruleId":"49","severity":1,"message":"62","line":15,"column":11,"nodeType":"51","messageId":"52","endLine":15,"endColumn":20},{"ruleId":"49","severity":1,"message":"63","line":16,"column":11,"nodeType":"51","messageId":"52","endLine":16,"endColumn":20},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'darkMode2' is assigned a value but never used.","'darkMode3' is assigned a value but never used.","'darkMode4' is assigned a value but never used.","'darkMode5' is assigned a value but never used.","'darkMode6' is assigned a value but never used.","'darkMode7' is assigned a value but never used.","'darkMode8' is assigned a value but never used.","'darkMode9' is assigned a value but never used."]